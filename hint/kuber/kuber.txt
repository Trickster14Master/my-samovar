под
	- контейнер\ы
	- отщий том (место)
	- ip 

сервисы kubernetes (ноды/узел)
	Главный узел
		- API Server = дерижор узлов кластера 
		- Scheduler = планировщик ресурсов 
		- Kube Controller Manager = управляет всеми подами 
		- etcd = отвечает за логи 

	- kubelet = отвечает за коммуникацию узлов 
	- kube-prox = отвечает за сетевые ресурсы 
	- Container Runtime = управление контейнерами

kubectl = утилита для управления клапстером 
kubectl cluster-info = проверяем состояние кластера через утилиту 
kubectl get pod - вывод всех подов 
k get pods -o wide - вывод всех подов + ip
kubectl get nodes - вывод информации о ноде 
k get namespaces - вывести все пространства имён 
k get pods --namespace=kube-system - вывести список подов запущеннх из определённой группы имён 
minikube ssh - подключение к ноде 
k run my-nginx-pod --image=nginx - создание пода с nginx
k describe pod my-nginx-pod - вывести информацию о поде 
k delete pod my-nginx-pod - удаление пода 
kubectl get nodes -A -owide -  проверить состояние кластера 
kubectl label node k8s-worker-longhorn longhorn=true = дать ноде лейбел
kubectl get nodes --show-labels = вывод лейблок в кластере 
kubectl get pods --all-namespaces -o wide --field-selector spec.nodeName=<node> - поды которые запущенны на определённой ноде 

kubectl get jobs -n longhorn-system - посмотреть jobs в определённом ns
kubectl logs -n longhorn-system job/longhorn-uninstall - посмотреть логи jobs 

kubectl get pod nginx-6f999cfffb-74mkd -o yaml = получить под внутри кубера виде yaml 
kubectl logs nginx-6f999cfffb-74mkd = получить логи  
kubectl get pod -L label1, label2 = вывести поды с определённым лейблом 
kubectl get pod -L label1=app = вывести поды с определёнными значениями волумов 

k create deployment my-nginx-deploy --image=nginx = создание диплоя (в нутри данного пространства можно создавать поды, все поды унаследуют image от диплоя, с помощью диплоя можно изменять содержимое подов)
k describe deploy my-nginx-deploy - вывод инфы о диплое 
k get deploy - вывести все диплои 
k scale deploy my-nginx-deploy --replicas=3 - увеличить число подов в диплое 

k expose deploy my-nginx-deploy --port=8080 --target-port=80 - создание сервиса для определённого диплоя (доступ только в нутри ноды)
k expose deploy my-nginx-deploy --type=NodePort --port=8080 --target-port=80 - сервер с возможностью выхода в интернет 
k delete services my-nginx-deploy - удалить сервис 
k get services - получить список сервисов 

обновления 
kubectl set image deploy k8s-hello k8s-web-hello=bstashchuk/k8s-web-hello:2.0.0 - k8s-hello диплой, k8s-web-hello нынишний контейнер, bstashchuk/k8s-web-hello:2.0.0 нужный контейнер 

обновление сервиса 
kubectl patch svc argocd-server -n argocd -p '{"spec": {"ports": [{"port": 80,"targetPort": 80,"name": "http"}],"type": "LoadBalancer"}}'
kubectl patch svc jenkins -n jenkins -p '{"spec": {"ports": [{"port": 80,"targetPort": 80,"name": "http"}],"type": "LoadBalancer"}}'


apiVersion: apps/v1
kind: Deployment - что создаём 
metadata:
  name: k8s-web-hello имя диплоя 
spec: - характеристики диплоя 
  replicas: 5 - сколько подов поднять 
  selector: - успользуеться для поиска нужных подов 
    matchLabels:
      app: k8s-web-hello
  template: - тут расписываеться как создать под 
    metadata:
      labels:
        app: k8s-web-hello - метка для пода 
    spec:
      containers:
      - name: k8s-web-hello
        image: bstashchuk/k8s-web-hello 
        resources:
          limits:
            memory: "128Mi"
            cpu: "250m"
        ports:
        - containerPort: 3000
        
kubectl apply -f deploymant.yaml - запуск 
